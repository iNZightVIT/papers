\section[A tour of iNZight's features]{A tour of \pkg{iNZight}'s features}\label{sec:features}

\pkg{iNZight} was originally built as a tool for high school statistics students, and was later incorporated into introductory statistics courses in New Zealand.
It has since matured and can now function as a rapid research development tool for community and government research groups.
The minimal interface provides instant feedback to user actions, allowing users to intuitively explore their data.
The \emph{variable first} paradigm makes it easy to learn new statistical concepts---such as hypothesis testing---by focusing on the output first, and consequently makes it very easy to pick up after a period of non-use, a typical scenario for generalists within organisations.
Ease-of-use is achieved through familiar controls such as \emph{drag-and-drop}, \emph{drop-down} selection, and \emph{slider bars}.
Using these controls, users select the variables they are interested in and the software reacts instantly based on variable type and defaults.
The simplest way to explore \pkg{iNZight}'s features is by demonstration.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_main.png}
    \caption[The iNZight GUI landing page.]{\label{fig:inzight_main} The \pkg{iNZight} \gls{gui} landing page presents users with a few controls. The labeled areas are: (A) the active data set is displayed prominently; (B) variable control boxes provide users either drag-and-drop from (A), or select from dropdowns; (C) graphs are displayed in the graphics window; (D) plot controls, most importantly the plot configuration controls (left); (E) if enabled, code for the active plot is shown here and can be edited by the user.}
\end{figure}


\subsection{Importing data}\label{sec:loading-data}

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/inzight_load_data.png}
    \caption{\label{fig:load_data} Load Data window, showing the chosen file, the File Type (guessed from the extension), and a preview of the data.}
\end{figure}

Datasets come in a wide range of formats, some of which are traditionally software-dependent \citep[for example \proglang{Excel}, ][stores files in Excel (.xlsx) format]{msexcel}.
Fortunately, there are thousands of \proglang{R} packages on \gls{cran}, amongst which are some dedicated to importing most of the common (and indeed many uncommon) file formats.
Usually, \proglang{R} users would need to first recognise or look up the file extension, find an appropriate package, then decipher the documentation to import an unusual file.
\pkg{iNZight} provides a simple \menu{Import Data} window from which users need only select a file to import: by default the software detects the file type from the filename extension and reads the file if the format is supported.
If a dataset is available publicly on the internet, users can also provide a URL from which \pkg{iNZight} will import the data instead.


Currently, \pkg{iNZight} supports files in \gls{csv}, tab-delimited text, \proglang{Excel}, \proglang{SAS}, \proglang{Stata}, \proglang{SPSS}, \proglang{R}-data, and JSON formats.
If the file is readable by \pkg{iNZight}, a preview is displayed for the user to check before proceeding with the import, as demonstrated in \cref{fig:load_data} which shows the \menu{Import Data} window for a \gls{csv} file.
The \menu{Import Data} window has an \menu{Advanced Options} section, expanded in \cref{fig:load_data},
for \gls{csv} and delimited-text files where users can override the default delimiter---for example in European countries where the semi-colon (;) is used (the comma is reserved as the decimal separator), or to choose between different encoding formats.
The preview is updated when these options are changed, so users can use trial-and-error if they are not sure what the necessary inputs are.
This is particularly useful for encoding, which is difficult to find out manually.

Lastly, the data preview allows users to override the default variable types.
This is particularly useful when importing a dataset with coded factors (e.g., values $1,2,3$ instead of \mbox{``A'', ``B'', ``C''}).
At the time of writing, \pkg{iNZight} supports numeric, categorical, and date-time formats---with more on the way.

\pkg{iNZight} also supports copying and pasting data from a spreadsheet to make things even easier for beginners.


\subsection{Creating graphs}\label{sec:creating-graphs}

Graphics provide the core of \pkg{iNZight}'s user experience; indeed, the very first prototype of \pkg{iNZight} was simply a drag-and-drop of variables onto slots to create a graph---everything else came later.
Behind the scenes, \pkg{iNZight} uses variable types (numeric, categorical, or date-time) to determine the appropriate graph.
For example, a single numeric variable from a small-to-moderate sized dataset is visualised (by default) with a dot plot, while a single categorical variable defaults to a bar chart.
While this may seem obvious to experienced statisticians, beginners cannot be expected to immediately grasp the concept of a ``numeric'' variable, and why a dot plot is used instead of a bar chart.
By removing this step, teaching and learning can focus on questions such as \emph{``Why does this variable produce this graph?''} and \emph{``What is it telling us?''}.
This, together with the ability to scroll quickly through a set of alternative applicable graphs,
also means experienced users can very quickly look at a variety of variables and graphs without needing to account for different data types.


\begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_infant_mortality.png}
    \caption[Demonstration of plot modifications available from iNZight's Add to Plot menu.]{\label{fig:plot_modifcation} Demonstration of plot modifications available from \pkg{iNZight}'s \menu{Add to Plot} menu. The \menu{Add to Plot} button, highlighted in red, opens a panel giving user control over colours, size, shape, labels, and much more. This can also be accessed from the plot menu, boxed in blue.}
\end{figure}


The control panel (\textbf{B} in \cref{fig:inzight_main}) lets users choose up to four variables: the first of these (\emph{Variable 1}) specifies the \emph{Primary Variable of Interest} (or \emph{Outcome Variable}).
The remaining three variable boxes are for exploring relationships between those variables and the first.
For example, `height' might be the primary variable, so selecting it will produce a \emph{dot plot} of height.
If a second variable chosen is categorical, for example `ethnicity', then by default we are shown a dot plot of height for each ethnicity, stacked vertically.
If \emph{Variable 2} is \emph{numeric}, such as `age', we see a graph of height versus age: \emph{Variable 1} (height) becomes the $y$-variable in the scatter plot.
The last two variable slots are subset variables that quickly and easily facet the plot (seen in \cref{fig:plot_modifcation}), allowing users to explore more complex relationships and interactions.
Any numeric variables used for either of the subsetting variables are automatically cut into four class intervals with approximately equal numbers of observations in each.

For a deeper exploration of variable relationships, there is an entire panel dedicated to plot modifications: \menu{Add to Plot}.
This is accessed either from the \menu{Plot} menu, or from the button in the \menu{Plot Toolbar} (boxed in red in \cref{fig:plot_modifcation}).
Users can choose from a selection of alternative plot types based on the variable(s) selected, as well as choose a colour variable, sizing variable, plot symbols, trend lines, change axis labels and limits, and much more.
The possible choices are presented in an interactive format such that the graph updates whenever the user changes input values, allowing them to explore ``\emph{What happens if \ldots}'', and ``\emph{What does this do?}''.
This way, beginners can learn more about what the software can do while they explore the data:
they are not limited by a lack of knowledge or coding skill, while researchers can quickly generate visualisations before starting their analysis.
\Cref{fig:plot_modifcation} shows a graph produced by \pkg{iNZight} exploring the relationship between infant mortality and (log) GDP, region (colour), population (point size), and year (subsetting/faceting) using the \emph{Gapminder} dataset.\footnote{https://www.gapminder.org/}


\subsection{Summaries and inference}\label{sec:summaries-and-inference}

To supplement the graphical display, \pkg{iNZight} provides two textual output modes: \emph{summary} and \emph{inference}, accessed from the \menu{Get Summary} and \menu{Get Inference} buttons, respectively, below the control panel.
As previously noted, the underlying metaphor for both is, \emph{``Give me the types of information analysts generally want to see in a situation like this''}.
Summary information includes basic statistics about variable(s) in the graph:
dot plots are summarised by means, standard deviations, and quantiles;
bar chart summaries display a table of counts and percentages;
scatter plots provide the formula for any fitted trend lines, along with the correlation between the variables.
If subset variables are present, then summaries for each subset are provided.


The inference information includes estimates, confidence intervals, and any applicable $p$-values for quantities such as means, proportions, and their differences.
For performing hypothesis testing,
\pkg{iNZight} displays a set of tests applicable to the chosen variable(s), as shown in \cref{fig:inzight_inference}
(the full list of tests currently available in \pkg{iNZight}'s basic mode are given in \cref{tab:hypothesis-tests}).
Inference information is either calculated using Normal theory or Bootstrap methods \citep[using the \pkg{boot} package,][]{boot}, as chosen by the user, with work on-going to add Bayesian inference methods.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.8\textwidth]{figure/inzight_inference.png}
    \caption[The Inference window provides a selection of hypothesis tests for the chosen variables.]{\label{fig:inzight_inference} The \menu{Inference} window provides a selection of hypothesis tests for the chosen variables. In this case, these are \code{Infantmortality} (a numeric variable) and \code{Region} (categorical with six levels), so \pkg{iNZight} provides an ANOVA test.}
\end{figure}


<<hypothesis_tests,results=tex,echo=FALSE>>=
library(magrittr)
library(kableExtra)
tab <- cbind(
    c('numeric', 'categorical', ''),
    c('', '2 levels', '2+ levels'),
    c('t-test$^1$', 'single proportion', '$\\chi^2$-test$^2$'),
    c('--', 't-test$^3$', 'ANOVA'),
    c('t-test$^3$', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$'),
    c('ANOVA', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$')
)
kable(tab,
    "latex",
    booktabs = TRUE,
    caption = 'iNZight hypothesis test options. ',
    label = 'hypothesis-tests',
    # align = "center",
    escape = FALSE) %>%
    add_header_above(c('', '', 'NULL', 'numeric', '2 level cat', '2+ level cat')) %>%
    add_header_above(c("Variable 1" = 2L, "Variable 2" = 4L)) %>%
    add_footnote(
        c(
            'One-sample',
            'Equal proportions',
            'Two-sample',
            'Equal distributions/independence',
            'Additionally includes epidemiological output such as odds and risk ratios.'
        ),
        'number', threeparttable = TRUE) %>%
    kable_styling(position = "center", full_width = FALSE)
@



\subsection{Data wrangling}\label{sec:data-wrangling}

Researchers typically start a new analysis by creating a set of exploratory graphs, as described in \cref{sec:creating-graphs}.
However, it is often not possible to get the desired graphs from the raw data, as it may not be in the correct format.
Often, data transformations are required before any useful analysis can begin (for example converting numeric codes to categorical variables) or to explore from a different perspective.
\pkg{iNZight} contains two \emph{data manipulation} menus: \menu{Data} and \menu{Variables}, for manipulating the full dataset and individual columns (variables), respectively.

In their book \emph{\proglang{R} for Data Science}, \citet{Wickham_2017} describe many data manipulation methods including \emph{filtering}, \emph{aggregation}, and \emph{reshaping}.
They demonstrate the \pkg{tidyverse} \citep{tidyverse} code for these actions, which \pkg{iNZight} uses behind-the-scenes to implement users' chosen actions.
\pkg{iNZight} provides a \gls{gui} interface to these (often complex) methods, enabling users to quickly and easily do things like filtering by value, converting from \emph{wide} to \emph{long} form, or joining two datasets together.
In most cases, the interface evolves from top-to-bottom as the user first chooses, for example, the variable to be worked on, with subsequent inputs tailored to previous choices, thus guiding users through the procedure.
At the bottom of many data manipulation windows is a preview of the data after transformation, as demonstrated in \cref{fig:data_mod_preview},
once again allowing users to play with inputs to get the desired output.
A full list of available methods is provided in \cref{app:data-methods}.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/inzight_data_mod.png}
    \caption{\label{fig:data_mod_preview} Here, the user is separating a column to create two new variables, with the preview displayed in the bottom-right. The relevant column names are underlined in red. The preview uses the first few rows of the data, and updates in real-time, reacting to changes the user makes, allowing them to experiment easily.}
\end{figure}

The \menu{Variable} menu gives users access to a range of variable transformation and modification actions.
For example, numeric variables can be converted to categorical (a common example is \code{Year}), or categorical variable levels can be renamed, reordered, or combined.
Users can also create new variables based on others in the dataset, and rename or delete existing variables.
\pkg{iNZight} creates a \emph{new} variable for each action---for example, converting \code{Year} to categorical yields a new variable named \code{Year\_cat} by default---which makes the experience more transparent and more exploration-friendly.
\Cref{app:variable-methods} gives a list of available variable manipulation methods.


\subsection{Additional facilities for special data types}\label{sec:special-data}

Many data sets that beginners are exposed to are in `tidy' format \citep[chapter~12]{Wickham_2017}, such that rows are individual records and columns variables.
However, there are some other data types that beginners may encounter, or make up a core component of statistical analysis.\footnote{Sentence not quite working.}
These data sets require special graphics and different handling to explore correctly, a task which \pkg{iNZight} has been extended to perform.
Some examples are described in the following sections.\footnote{Something about this not really comparsh(????) correctly.}


\subsubsection{Complex survey designs}\label{sec:surveys}

One of the more important data types demographers and researchers using official statistics encounter is data from complex surveys, which requires information about the survey's structure to provide valid graphs, summaries, and inferences.
\pkg{iNZight} handles survey designs behind the scenes, requiring the user to specify the structure either manually (\cref{fig:inzight_survey_spec}) or by importing a special \emph{survey design} file.
Data producers can distribute the design file with their datasets to ensure that users conduct valid analyses of their data.
Once specified to \pkg{iNZight}, the user can forget about the survey design and use \pkg{iNZight} as normal: survey weights and other design information is incorporated correctly into graphs, summaries, and data manipulation functions using the \proglang{R} packages \pkg{survey} \citep{survey} and \pkg{srvyr} \citep{srvyr} behind the scenes.
The \proglang{R} code (\cref{sec:code-writing}) for specifying the survey design is included in \pkg{iNZight}'s code history.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/inzight_survey_spec.png}
    \caption{\label{fig:inzight_survey_spec} Users can specify survey design information manually by filling in the fields. These will then be used throughout the session thereafter where appropriate.}
\end{figure}

\pkg{iNZight} handles stratified as well as one- and two-stage cluster surveys.
It also handles so-called \emph{replicate weight} designs, an alternative format for data distribution in common use by producers of survey data in situations in which the actual information on clusters cannot be distributed to researchers for privacy/security reasons.\footnote{Wordy - fix up!}
Instead, sets of ``replicate weights'' are provided, a mechanism that still permits valid variance estimation \citep{Lumley_2010}.
\pkg{iNZight} can also calibrate surveys with population data from other sources to reduce the variances of estimates.
Once again, this information is specified once, either by the user or a survey design file, and is subsequently used throughout the rest of the analysis.

The types of graphs available differ for survey data, as they now represent a picture of the \emph{population}, and not simply a sample.
For a single numeric variable, a \emph{histogram} is displayed by default instead of a dot plot.
For two numeric variables, a \emph{bubble plot} is used, which is a scatter plot with points sized by the weights of respective observations;
alternatively, this can be displayed as a \emph{hex-bin} plot, which can be particularly effective when there are large numbers of observations.
Bar plots are still used by default for categorical variables in surveys.
Summaries display the same information as before (\cref{sec:summaries-and-inference}), but provide estimates and standard errors of the population values, as shown in \cref{fig:inzight_survey_summary}.
Similarly, inferences and hypothesis tests are performed for the population, and thus include additional uncertainties from the survey design by using the survey equivalents from the \pkg{survey} package.


\begin{figure}[tp]
    \centering
    \includegraphics[width=0.8\textwidth]{figure/inzight_survey_summary.png}
    \caption[The Inference window provides a selection of hypothesis tests for the chosen variables.]{\label{fig:inzight_survey_summary} The \menu{Summary} window provides simple summary statistics and, in the case of survey data, standard errors of these population estimates.}
\end{figure}



\subsubsection{Time series}\label{sec:time-series}

Another important data type is \emph{time series} in which the variable of interest is observed changing over time.
Time information can be specified to \pkg{iNZight} in its dedicated \emph{Time Series} module, either in a specially formatted column in the data, or manually by the user within the module itself.
Currently \pkg{iNZight} only supports time series with equally spaced observations and non-missing values.

\pkg{iNZight}'s time series module provides capabilities for users to graph one or more time series on a graph to see how values change over time, and automatically overlays a smoother on each.
Additionally, the series can be decomposed into trend, seasonal, and residual components (using \acrlong{stl}).
Animations are available to help with understanding how the various components combine to form the final series, and a Holt-Winters' forecast can be obtained by choosing the \emph{Forecast} plot type \citep{Holt_2004,Winters_1960}.

\Cref{fig:inzight_ts} shows the time series module with quarterly visitor arrivals data for several countries.
The software automatically detects the \code{Time} column (``Date'') when loaded, and draws the displayed graph without any user interaction.
Users have a choice between \emph{additive} and \emph{multiplicative} models, and a slider to control the smoothness of the LOESS smoother (in red).
From the \menu{Select Variable} list, one or more variables to be displayed on the graph can be chosen, while the graph type is selected from the list on the right (`Plot Type Options').

\begin{figure}[t!]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_time_series.png}
    \caption{\label{fig:inzight_ts} The time series module.}
\end{figure}

\subsubsection{Maps}\label{sec:maps}

Geographical data is particularly important for looking at regional effects, or the distribution of location-based events; however, it can be difficult to create appropriate graphs which often require sourcing maps or shape files.
\pkg{iNZight} features a \emph{Maps} module for exploring two types of geographical data: point-based data, in which observations are associated with latitude and longitude locations (for example earthquakes); and regional maps for exploring data related to fixed regions (for example: countries, provinces, states).
The functionality within the maps module calls wrapper functions from the \pkg{iNZightMaps} package \citep{iNZightMaps}.


For point-based observations, points are overlaid using the \pkg{ggmap} package \citep{ggmap}.
The maps module in \pkg{iNZight} lets users explore other variables in the dataset using the same techniques used for scatter plots:
size, colour, transparency, and faceting, all using interface controls very similar to the base program.
A demonstration of this module using New Zealand earthquake data is shown in \cref{fig:inzight_quakes},\footnote{Sourced from \url{https://www.geonet.org.nz/}}
where points are coloured by depth, sized by magnitude, and faceted by whether or not they were felt.

\begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_quakes.png}
    \caption{\label{fig:inzight_quakes} The maps module showing New Zealand earthquakes sized by magnitude, coloured by depth, and subset by whether or not they were felt.}
\end{figure}

Regional data has the added complexity of requiring a definition of the boundaries of the areas contained in the data.
For example, New Zealand can be divided into regional councils (Auckland, Otago, etc), which have physical boundaries that can be described by an external shape file.
The Maps module in \pkg{iNZight} lets users choose the type of regions contained in the data, and proceeds to match labels between the dataset and map using several matching techniques:
for example, countries may be coded using their conventional names, official names, or three-letter codes (``New Zealand'' versus ``NZ'' versus ``NZL'').
Once the initial set-up is complete, users can choose variables to graph, which are then visualized on the map using colour, points, and other techniques.
Often users are interested in regional trends over time, so \pkg{iNZight} automatically detects this and can animate maps over time or display trends as \emph{sparklines}.\footnote{Cite these sparklines? or an example??}

% \begin{figure}[p]
%     \centering
%     \includegraphics[width=0.8\textwidth]{figure/inzight_quakes.png}
%     \caption{\label{fig:inzight_sparklines} Maps module showing changes in X over time.}
% \end{figure}


\subsubsection{Other data types and features}\label{sec:other-data-types}

Besides these examples, \pkg{iNZight} has several other modules that allow more complex statistical methodology or support other special data types.
\emph{Multiple Response} data arises from ``\emph{Choose all that apply}'' type survey questions, and need their own method of graphics to explore adequately.
There is also a multivariate data add-on module that can perform and visualise multivariate statistical methods such as principal components analysis and non-metric multidimensional scaling.
The model fitting module allows users to fit complex linear and generalised linear regression models to data (including complex survey designs).
The regression model output is updated automatically as users add and remove explanatory variables, and a range of residual plots are available to explore and help users to quickly fit a model with any necessary transformations.

Besides the examples listed above, \pkg{iNZight} has an add-on system (\cref{sec:addons}) that allows developers to extend the interface to suit various types of data or to perform specific analyses.
Individual package developers or research groups can create modules that can be shared publicly or privately.



\subsection[Code writing for getting started with R]{Code writing for getting started with \proglang{R}}\label{sec:code-writing}

\footnote{Move/mention up front when R Commander / Deducer first introduced?}
One feature prominent in the other \proglang{R} \glspl{gui} is the coding interface, which differs significantly from \pkg{iNZight}'s.
\proglang{R} Commander provides a prominent ``script'' box into which code appears when using the command boxes, or users can enter their own code, and below this is an output terminal.
In contrast, \pkg{Deducer} is added onto an existing \proglang{R} Console, providing menu-driven commands to run code in the console.
Each of these \glspl{gui} require familiarity with \proglang{R} coding and an understanding of simple statistical terms and methods in order to navigate the menus.
\pkg{iNZight}, however, is completely separate from the \proglang{R} console, providing an interface-only experience for beginners and users not interested in coding.
Code generated by various actions behind the scenes is stored and available for users to review and run---with changes---in \proglang{R} manually.

The \proglang{R} script contains a history of all actions executed by the user, from importing the data, applying transformations and manipulations, to any plots and summaries the user chose to save.
This provides a record of what the user did which can be saved and run in \proglang{R} itself, with edits if desired.\footnote{Remove repetition.}
This lets users explore a dataset with a \gls{gui} tool to quickly start an analysis that can be used as the basis of a reproducible workflow.

A more advanced feature is the \proglang{R} code box at the bottom of the interface (see \cref{fig:inzight_main}).
This displays the code used to generate the current plot and, more importantly, can be edited by the user and run, but remains otherwise limited in functionality.
The interface detects changes in the code and applies those changes to the \gls{gui}, providing a seamless way for users to begin experimenting with code whilst retaining the familiarity of the \gls{gui}.
Users can also store the code for the current plot, adding it to the \proglang{R} script.
A similar code box is displayed in the \menu{Get Summary} and \menu{Get Inference} windows, with plans to implement this behaviour throughout \pkg{iNZight} in future.


\pkg{iNZight} uses a \pkg{tidyverse} \citep{tidyverse} workflow, as this provides an introduction to \proglang{R} with a simpler, verb-like syntax for data wrangling, and is used in the \emph{\proglang{R} for Data Science} book \citep{Wickham_2017}.
To demonstrate \pkg{iNZight}'s code-writing capabilities, \cref{app:code} contains the script generated during the tour presented in this section.

The code writing features of \pkg{iNZight} are described in more detail in Section~3.2.2 of \cite{Burr_2021} together with the educational imperatives it facilitates.
In addition, extremely high-level functions in the \pkg{iNZightPlots} package \citep{iNZightPlots} have been written to facilitate quite a few of the low-human-memory features of \pkg{iNZight}'s \gls{gui} environment in a coding environment \citep[see Sections~3 and 4 of][]{Burr_2021}.
