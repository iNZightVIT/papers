\section[A tour of iNZight's features]{A tour of \pkg{iNZight}'s features}\label{sec:features}

\pkg{iNZight}'s ease-of-use has enabled us to broaden our audience from high school students to tertiary institutions, community groups, and government researchers.
We achieved an intuitive and familiar interface using standard \gls{gui} controls such as \emph{drag-and-drop}, \emph{drow-down} selection, and \emph{slider bars}.
Users can select variables to explore and drive the software, which reacts instantly to each action using variable type and intelligent defaults to choose the best output.
The simplest way to explore \pkg{iNZight}'s functionality and illustrate the concepts introduced in \cref{sec:design-principles} is by demonstration.


\begin{figure}[tp]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/win/01_inzight_main.png}
    \caption[The iNZight GUI landing page.]{\label{fig:inzight_main} The \pkg{iNZight} \gls{gui} landing page presents users with a few controls. The labeled areas are: (A) data sets are displayed here once loaded \textbf{(question: load some data for this preview?)}; (B) variable control boxes provide users either drag-and-drop from (A), or select from dropdowns; (C) graphs are displayed in the graphics window; (D) plot controls, most importantly the plot configuration controls (left); (E) if enabled, code for the active plot is shown here and can be edited by the user.}
\end{figure}


\subsection{Importing data}\label{sec:loading-data}

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/win/02_import_data.png}
    \caption{\label{fig:load_data} Load Data window, showing the chosen file, the File Type (guessed from the extension), and a preview of the data. \textbf{TODO: SHOW ADVANCED MENU}}
\end{figure}

Datasets come in a wide range of formats, some of which are traditionally software-dependent \citep[for example, \proglang{Excel}, ][stores files in Excel (.xlsx) format]{msexcel}.
Fortunately, there are thousands of \proglang{R} packages on \gls{cran}.
Some of these packages are dedicated to importing the common (and indeed many uncommon) file formats.
Usually, \proglang{R} users need to recognise or look up the file extension, find an appropriate package, then decipher the documentation to import an unfamiliar file.
\pkg{iNZight} provides a simple \menu{Import Data} window from which users need only select a file to import.
By default, the software detects the file type from the filename extension and reads the file if the format is supported.
Where a dataset is available publicly on the internet, users may instead provide a URL from which \pkg{iNZight} can import the data instead.


At the time of writing, \pkg{iNZight} (version 4.2) supports files in \gls{csv}, tab-delimited text, \proglang{Excel}, \proglang{SAS}, \proglang{Stata}, \proglang{SPSS}, \proglang{R}-data, and JSON formats.
If the file is readable by \pkg{iNZight}, a preview is displayed to check before proceeding with the import.
\Cref{fig:load_data} shows the \menu{Import Data} window for a \gls{csv} file.
The \menu{Import Data} window has an \menu{Advanced Options} section for \gls{csv} and delimited-text files, expanded in \cref{fig:load_data}.
Here, users can override the default delimiter or choose between different encoding formats.
For example, it is common in European countries to see the semi-colon (;) used as the delimiter, so this option allows users to read files coded this way.
The preview is updated when these options are changed, so users can use trial-and-error if they are unsure what the necessary inputs are.
This feature is handy for guessing encoding, which can be tricky to work out manually.
The data preview also allows users to override the default variable types, which is beneficial when importing a dataset with coded factors. For example, values $1,2,3$ instead of \mbox{``A'', ``B'', ``C''}, users can override the variable type from `numeric' to `categorical' and relabel the levels after import.

\pkg{iNZight} also supports copying and pasting data from a spreadsheet to make things even easier for beginners.
Data can be copied from \proglang{Excel} or a similar program or directly from a webpage if the formatting is OK.
Users then open the \menu{Paste data from} window, which has a text box for pasting the data.
As before, a preview displays the result for quick confirmation before confirming the import.


\subsection{Visualising data with graphics}\label{sec:creating-graphs}

Since the initial prototype using drag-and-drop to select variables and create graphs, graphics have been at the core of \pkg{iNZight}'s user experience.
Behind the scenes, \pkg{iNZight} uses variable types (numeric, categorical, or date-time) to determine the appropriate graph.
For example, a single numeric variable from a small-to-moderate sized dataset is visualised (by default) with a dot plot, while a single categorical variable defaults to a bar chart.
While this may seem obvious to experienced statisticians, it takes time for beginners to grasp the concept of a ``numeric'' variable and why a dot plot is used instead of a bar chart.
By removing this step, teaching and learning can focus on questions such as \emph{``Why does this variable produce this graph?''} and \emph{``What is it telling us?''}.
This automation, together with the ability to scroll quickly through a set of applicable alternative graphs, also means experienced users can very quickly look at various variables and graphs without needing to account for different data types.


\begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/win/03_plot_modifications.png}
    \caption[Demonstration of plot modifications available from iNZight's Add to Plot menu.]{\label{fig:plot_modifcation} Demonstration of plot modifications available from \pkg{iNZight}'s \menu{Add to Plot} menu. The \menu{Add to Plot} button, highlighted in red, opens a panel giving user control over colours, size, shape, labels, and much more. This can also be accessed from the plot menu, boxed in blue.}
\end{figure}


The control panel (\textbf{B} in \cref{fig:inzight_main}) lets users choose up to four variables:
the first of these (\emph{Variable 1}) specifies the \emph{Primary Variable of Interest} (or \emph{Outcome Variable}).
The remaining three variable boxes are for exploring relationships between those variables and the first.
For example, `height' might be the primary variable, so selecting it will produce a dot plot of height.
Now a second variable can be chosen. Suppose this second variable is categorical, for example, `ethnicity'.
In that case, the software will draw a set of dot plots of height, one for each ethnicity, stacked vertically.
However, if \emph{Variable 2} is \emph{numeric}, such as `age', we are shown a graph of height versus age:
\emph{Variable 1} (height) becomes the $y$-variable in the scatter plot.
The final two variable slots are subset variables that quickly and easily facet the plot (seen in \cref{fig:plot_modifcation}), allowing users to explore more complex relationships and interactions.
Any numeric variables used for either of the subsetting variables are automatically cut into four class intervals with approximately equal numbers of observations in each.


The \menu{Add to Plot} module is dedicated to plotting modifications for a deeper exploration of variable relationships and is accessed from either the \menu{Plot} menu or the button in the \menu{Plot Toolbar} (boxed in red in \cref{fig:plot_modifcation}).
Here, users can choose from a selection of alternative plot types based on the selected variable(s).
Other modifications include specifying a colour or sizing variable, adjusting plot symbols, adding trend lines, modifying axis labels and limits, and much more.
The possible choices are presented in an interactive format such that the graph updates whenever the user changes input values, allowing them to explore ``\emph{What happens if \ldots}'' and ``\emph{What does this do?}''.
This way, beginners can learn more about what the software can do while exploring the data and are not limited by a lack of knowledge or coding skill.
Meanwhile, researchers can quickly generate visualisations before starting their analysis.
\Cref{fig:plot_modifcation} shows a graph produced by \pkg{iNZight} exploring the relationship between infant mortality and (log) GDP using the \emph{Gapminder} dataset.\footnote{https://www.gapminder.org/}
Here, plot modifications are used to show region (colour), population (point size), and year (subsetting/faceting).


\subsection{Numerical summaries and inferences}\label{sec:summaries-and-inference}

\pkg{iNZight} provides two textual output modes to supplement the graphical display: \emph{summary} and \emph{inference}, accessed from the \menu{Get Summary} and \menu{Get Inference} buttons, respectively, below the control panel.
As previously noted, the underlying metaphor for both is, \emph{``Give me the types of information analysts generally want to see in a situation like this''}.
The summary information includes basic statistics about the variable(s) in the graph:
dot plots are summarized by means, standard deviations, and quantiles;
bar chart summaries display tables of counts and percentages;
scatter plots provide the formula for any fitted trend lines, along with the correlation between the variables.
If subset variables are present, then summaries for each subset are provided.


Inference information includes estimates, confidence intervals, and any applicable $p$-values for quantities such as means, proportions, and their differences.
For performing hypothesis testing,
\pkg{iNZight} displays a set of tests applicable to the chosen variable(s), as shown in \cref{fig:inzight_inference}.
\Cref{tab:hypothesis-tests} gives a complete list of available tests in \pkg{iNZight}'s basic mode (as of version 4.2).
Users may choose between Normal theory of Bootstrap methods \citep[using the \pkg{boot} package,][]{boot} to calculate inference information.
We also have plans of adding Bayesian inference methods in future.


\begin{figure}[tp]
    \centering
    \includegraphics[width=0.8\textwidth]{figure/win/04_get_inference.png}
    \caption[The Inference window provides a selection of hypothesis tests for the chosen variables.]{\label{fig:inzight_inference} The \menu{Inference} window provides a selection of hypothesis tests for the chosen variables. In this case, these are \code{Infantmortality} (a numeric variable) and \code{Region} (categorical with six levels), so \pkg{iNZight} provides an ANOVA test.}
\end{figure}


<<hypothesis_tests,results=tex,echo=FALSE>>=
library(magrittr)
library(kableExtra)
tab <- cbind(
    c('numeric', 'categorical', ''),
    c('', '2 levels', '2+ levels'),
    c('t-test$^1$', 'single proportion', '$\\chi^2$-test$^2$'),
    c('--', 't-test$^3$', 'ANOVA'),
    c('t-test$^3$', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$'),
    c('ANOVA', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$')
)
kable(tab,
    "latex",
    booktabs = TRUE,
    caption = 'iNZight hypothesis test options. ',
    label = 'hypothesis-tests',
    # align = "center",
    escape = FALSE) %>%
    add_header_above(c('', '', 'NULL', 'numeric', '2 level cat', '2+ level cat')) %>%
    add_header_above(c("Variable 1" = 2L, "Variable 2" = 4L)) %>%
    add_footnote(
        c(
            'One-sample',
            'Equal proportions',
            'Two-sample',
            'Equal distributions/independence',
            'Additionally includes epidemiological output such as odds and risk ratios.'
        ),
        'number', threeparttable = TRUE) %>%
    kable_styling(position = "center", full_width = FALSE)
@



\subsection{Data wrangling}\label{sec:data-wrangling}

Researchers typically start a new analysis by creating a set of exploratory graphs, as described in \cref{sec:creating-graphs}.
However, it is often not possible to get the desired graphs from the raw data if it is not formatted correctly.
Data transformations may be required before any worthwhile analysis can begin (for example, converting numeric codes to categorical variables) or to explore from a different perspective.
\pkg{iNZight} contains two \emph{data manipulation} menus: \menu{Data} and \menu{Variables}, for manipulating the whole dataset or individual columns (variables), respectively.

In their book \emph{\proglang{R} for Data Science}, \citet{Wickham_2017} describe many data manipulation methods, including \emph{filtering}, \emph{aggregation}, and \emph{reshaping}.
They demonstrate the \pkg{tidyverse} \citep{tidyverse} code for these actions, which \pkg{iNZight} uses behind-the-scenes to implement users' chosen actions.
\pkg{iNZight} provides a \gls{gui} interface to these (often complex) methods.
These interfaces enable users to quickly and easily do things like filtering by value, converting from \emph{wide-} to \emph{long}-form, or joining two datasets together.
In most cases, the interface evolves from top to bottom as the user inputs information.
For example, most processes begin by asking the user to select a variable with which to work.
Subsequent inputs are then tailored to previous choices, thus guiding users through the procedure (as per \gls{dp} 4).
At the bottom of many data manipulation windows is a preview of the data after transformation, as demonstrated in \cref{fig:data_mod_preview},
once again allowing users to play with inputs to get the desired output.
\Cref{app:data-methods} contains a complete list of available methods.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/win/05_separate_cols.png}
    \caption{\label{fig:data_mod_preview} Here, the user is separating a column to create two new variables, with the preview displayed in the bottom-right. The relevant columns are boxed in red. The preview uses the first few rows of the data, and updates in real-time, reacting to changes the user makes, allowing them to experiment easily.}
\end{figure}

The \menu{Variable} menu gives users access to a range of variable transformation and modification actions.
For example, users can convert numeric variables into categorical ones or modify the levels of a categorical variable by renaming, reordering, or combining them.
Users can also create new variables based on others in the dataset and rename or delete existing variables.
In all cases, \pkg{iNZight} creates a \emph{new} variable for each action.
For example, converting \code{Year} to categorical yields a new variable named \code{Year\_cat} by default.
This behaviour makes the experience more transparent and exploration-friendly.
\Cref{app:variable-methods} gives a list of available variable manipulation methods.


\subsection{Additional facilities for special data types}\label{sec:special-data}

Beginners are often exposed to data sets that are in `tidy' format \citep[chapter~12]{Wickham_2017}, such that rows represent individual records and columns contain variables.
There are, of course, several types of data that are a vital component of statistical analysis or are commonly encountered by those new to the field.
Such datasets require specialist graphics or handling, often using specialist software or \proglang{R} packages.
Here we provide several examples of alternative data types that \pkg{iNZight} can handle.


\subsubsection{Complex survey designs}\label{sec:surveys}

One of the essential data types demographers and researchers who use official statistics encounter is data from complex surveys, which require information about the survey's structure to provide valid graphs, summaries, and inferences.
\pkg{iNZight} handles survey designs behind the scenes, requiring the user to specify the structure manually (\cref{fig:inzight_survey_spec}) or import a \emph{survey design specification} file.
Data producers can distribute the design file with their datasets to ensure that users conduct accurate data analyses.
Once specified to \pkg{iNZight}, the user can forget about the survey design and use \pkg{iNZight} as usual.
Survey weights and other design information is incorporated correctly into graphs, summaries, and data manipulation functions using the \proglang{R} packages \pkg{survey} \citep{survey} and \pkg{srvyr} \citep{srvyr} behind the scenes.
\pkg{iNZight}'s code history automatically includes the \proglang{R} code (\cref{sec:code-writing}) for specifying the survey design.


\begin{figure}[tp]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/win/06_survey_design.png}
    \caption{\label{fig:inzight_survey_spec} Users can specify survey design information manually by filling in the fields. These will then be used throughout the session thereafter where appropriate.}
\end{figure}

\pkg{iNZight} handles stratified as well as one- and two-stage cluster surveys.
Additionally, \pkg{iNZight} supports \emph{replicate weight designs} where a set of replicate weights replaces design information such as clustering and stratification variables.
These replicate weights allow surveys to be analysed correctly without exposing confidential or private information within the design variables (for example, clusters).
Instead, sets of ``replicate weights'' are provided, a mechanism that still permits valid variance estimation \citep{Lumley_2010}.
\pkg{iNZight} can also calibrate surveys with population data from other sources to reduce the variances of estimates.
Once again, this information is specified once (possibly using a design specification file) and used throughout the analysis.


The types of graphs available differ for survey data, as they now represent a picture of the \emph{population}, not simply a sample.
For a single numeric variable, a \emph{histogram} is displayed by default instead of a dot plot.
A \emph{bubble plot} is used for two numeric variables, which is a scatter plot with points sized by the weights of respective observations.
Alternatively, a \emph{hex-bin} plot can be used to visualize the relationship between two numeric variables and is particularly effective when there are large numbers of observations; indeed, it is the default in such situations.
Bar plots are still used by default for categorical variables in surveys.
Summaries display the same information as before (\cref{sec:summaries-and-inference}) but provide estimates and standard errors of the population values, as shown in \cref{fig:inzight_survey_summary}.
Similarly, inferences and hypothesis tests are performed for the population and thus include additional uncertainties from the survey design by using the appropriate methods from the \pkg{survey} package.


\begin{figure}[tp]
    \centering
    \includegraphics[width=0.8\textwidth]{figure/win/07_survey_summary.png}
    \caption[The Inference window provides a selection of hypothesis tests for the chosen variables.]{\label{fig:inzight_survey_summary} The \menu{Summary} window provides simple summary statistics and, in the case of survey data, standard errors of these population estimates.}
\end{figure}



\subsubsection{Time series}\label{sec:time-series}

Another standard data type is \emph{time series}, in which the variable of interest is observed changing over time.
Time series data can be explored with the dedicated \emph{Time Series} module in \pkg{iNZight}.
Time information can be specified either in a specially formatted variable or manually by the user.
At the time of writing, \pkg{iNZight} only supports time series with equally spaced observations and non-missing values.
However, uneven observations can be aggregated from the \menu{Variable} menu to prepare the data for the time series module.


\pkg{iNZight}'s time series module allows users to plot one or more time series on a graph to see or compare how values change over time.
The software automatically overlays a smoother across each series.
Additionally, the series can be decomposed into the trend, seasonal, and residual components using \acrlong{stl}.
Optional animations help users understand how the various components combine to form the final series, and the \emph{Forecast} plot type provides a Holt-Winters' forecast \citep{Holt_2004,Winters_1960}.


\Cref{fig:inzight_ts} shows the time series module with quarterly visitor arrivals data for several countries.
When loaded, the software automatically detects the \code{Time} column (``Date'') and draws the displayed graph without any user interaction.
Users can choose between \emph{additive} and \emph{multiplicative} models and use the slider to control the smoothness of the LOESS curve (in red).
Users choose one or more variables from the \menu{Select Variable} list to display on the graph, while graph type is selected from `Plot Type Options'.


\begin{figure}[t!]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/win/08_time_series.png}
    \caption{\label{fig:inzight_ts} The time series module. This data set contains a variable called 'Date' which is in the correct time format, so \pkg{iNZight} automatically plots the first variable, in this case 'Australia'.}
\end{figure}

\subsubsection{Maps}\label{sec:maps}

Geographical data is essential for looking at regional effects or the distribution of location-based events; however, it can be difficult to create appropriate graphs, often requiring maps or shapefiles.
\pkg{iNZight} features a \emph{Maps} module for exploring two types of geographical data: point-based data, in which observations have latitude and longitude locations (for example, earthquakes), and regional maps for exploring data related to fixed regions (for example, countries, provinces, or states).
The functionality within the maps module calls wrapper functions from the \pkg{iNZightMaps} package \citep{iNZightMaps}.


Point-based observations use the \pkg{ggmap} package \citep{ggmap} to overlay a map with observed data.
The maps module in \pkg{iNZight} lets users explore other variables in the dataset using the same techniques used for scatter plots:
users adjust the size, colour, and transparency of points and specify faceting using an interface similar to the base program.
A demonstration of this module using New Zealand earthquake data\footnote{Sourced from \url{https://www.geonet.org.nz/}} is shown in \cref{fig:inzight_quakes}, where points are coloured by depth, sized by magnitude, and faceted by whether or not they were felt.

\begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_quakes.png}
    \caption{\label{fig:inzight_quakes} The maps module showing New Zealand earthquakes sized by magnitude, coloured by depth, and subset by whether or not they were felt.}
\end{figure}

Regional data has the added complexity of requiring a definition of the boundaries of the areas contained in the data.
For example, New Zealand can be divided into regional councils (Auckland or Otago, for example), with physical boundaries that an external shapefile can describe.
Another example is the boundaries of the states of the USA.
The Maps module in \pkg{iNZight} lets users choose the type of regions contained in the data and proceeds to match labels between the dataset and map using several matching techniques:
for example, countries may be coded using their conventional names, official names, or three-letter codes (``New Zealand'' versus ``NZ'' versus ``NZL'').
Once the initial set-up is complete, users can choose variables to visualise on the map using colour, points, and other techniques.
Users are often interested in regional trends over time, so \pkg{iNZight} can automatically detect longitudinal or time series data and animate maps over time or display trends as \emph{sparklines} \citep{Tufte_2001}.

% \begin{figure}[p]
%     \centering
%     \includegraphics[width=0.8\textwidth]{figure/inzight_quakes.png}
%     \caption{\label{fig:inzight_sparklines} Maps module showing changes in X over time.}
% \end{figure}


\subsubsection{Other data types and features}\label{sec:other-data-types}

Besides these examples, \pkg{iNZight} has several other modules that allow more complex statistical methodology or support other unique data types.
\emph{Multiple Response} data arises from ``\emph{Choose all that apply}'' type survey questions and need their own graphics methods to explore adequately.
The multivariate data add-on module lets users perform multivariate statistical methods and visualise the results, including principal components analysis and non-metric multidimensional scaling.
Using the model fitting module, users can fix complex linear and generalised linear regression models to standard and survey data.
In this module, regression output automatically updates as users add and remove explanatory variables.
A range of residual plots is available to explore and help users quickly fit a model with any necessary transformations.

Besides the examples listed above, \pkg{iNZight} has an add-on system (\cref{sec:addons}) that allows developers to extend the interface to suit various data types or perform specific analyses.
Individual package developers or research groups can create modules that can be shared publicly or privately.



\subsection[Code writing for getting started with R]{Code writing for getting started with \proglang{R}}\label{sec:code-writing}

One feature prominent in the other \proglang{R} \glspl{gui} is the coding interface, which differs significantly from \pkg{iNZight}'s.
\proglang{R} Commander provides a prominent ``script'' box into which code appears when using the command boxes, or users can enter custom code, and below this is an output terminal.
In contrast, \pkg{Deducer} is added onto an existing \proglang{R} Console, providing menu-driven commands to run code in the console.
Each of these \glspl{gui} requires familiarity with \proglang{R} coding and an understanding of simple statistical terms and methods to navigate the menus.
In contrast, \pkg{iNZight} runs separately from the \proglang{R} console, providing an interface-only experience for beginners and users not interested in coding.
Code generated by various actions behind the scenes is stored and available for users to review and run---with changes---in \proglang{R} manually.

The \proglang{R} script contains a history of all actions executed by the user, including importing the data, applying transformations and manipulations, and any plots and summaries the user chose to save.
The script provides a record of what the user did and can be saved, edited, and run in \proglang{R}.
This lets users explore a dataset with a \gls{gui} tool to quickly start an analysis and generate an \proglang{R} script template to use as the basis of a reproducible workflow.

A more advanced feature is the interactive \proglang{R} code box at the bottom of the interface (see \cref{fig:inzight_main}).
It displays the code used to generate the current plot, and, more importantly, users can edit and run the code displayed.
The interface detects changes in the code and applies those changes to the \gls{gui}, providing a seamless way for users to begin experimenting with code whilst retaining the familiarity of the \gls{gui}.
Users can also store the code for the current plot and add it to the \proglang{R} script.
A similar code box is displayed in the \menu{Get Summary} and \menu{Get Inference} windows, with plans to implement this behaviour throughout \pkg{iNZight} in future.


\pkg{iNZight} uses a \pkg{tidyverse} \citep{tidyverse} workflow, as this provides an introduction to \proglang{R} with a simpler, verb-like syntax for data wrangling as used in the \emph{\proglang{R} for Data Science} book \citep{Wickham_2017}.
To demonstrate \pkg{iNZight}'s code-writing capabilities, \cref{app:code} contains the script generated during the tour presented in this section.

The code writing features of \pkg{iNZight} are described in more detail in Section~3.2.2 of \cite{Burr_2021}, together with the educational imperatives it facilitates.
In addition, easy-to-use, high-level functions in the \pkg{iNZightPlots} package \citep{iNZightPlots} facilitate quite a few of the low-human-memory features of \pkg{iNZight}'s \gls{gui} environment in a coding environment \citep[see Sections~3 and 4 of][]{Burr_2021}.
