\section{Introduction}\label{sec:intro}

The open-source statistical programming environment \proglang{R} \citep{rcore}, used throughout statistics and data science, is supported by a repository of thousands of free packages providing access to the latest statistical techniques, graphics, and everything in between.
Several packages provide graphical user interfaces (\glspl{gui}), allowing users to interact with \proglang{R} without grappling with code (but with opportunities to do so if desired).
These \glspl{gui} empower a broader audience to create graphs, test hypotheses, and access other statistical methods that were previously accessible only to \proglang{R} coders.
Two prominent examples are \proglang{R} Commander \citep{Rcommander,Fox_2016} and \pkg{Deducer} \citep{Deducer}.
\proglang{R} Commander is a self-contained interface that displays, writes, and runs user-editable \proglang{R}~code.
\pkg{Deducer} extends the \proglang{R} console with menus that open \gls{gui} interfaces for various statistical methods.
\citeauthor{Muenchen_2020} \citeyearpar{Muenchen_2020,Muenchen_2020b} provides a detailed review of these and other \gls{gui} interfaces to \proglang{R}, including BlueSky Statistics \citep{BlueSky}, Jamovi \citep{jamovi}, and \pkg{RKWard} \citep{RKWard}.
These \glspl{gui} provide point-and-click interfaces that let users perform a set of procedures without the need to recall the \proglang{R} function and argument names.
However, they do require prior knowledge of the names of the underlying statistical procedures they want to invoke, what they do, and how to use them.

This paper introduces \pkg{iNZight}, another \gls{gui} system written in \proglang{R} consisting of a collection of \proglang{R} packages, bringing data visualisation and analysis to an even wider audience.
The name \pkg{iNZight} is a play-on-words blending the word ``insight'' with the initials of our home country of New~Zealand.
The ability to explore, visualize, and analyse data without prior knowledge of statistical procedures is \pkg{iNZight}'s foundational design principle and the primary point of difference from other \proglang{R} \gls{gui} interfaces.
This principle extends to handling specific dataset types, such as those generated by complex surveys:
users can interact with, explore, and visualize the data without worrying about the underlying structure, something other \proglang{R} \glspl{gui} cannot do (see \cref{sec:surveys}).

A fundamental difference between \pkg{iNZight} and other \proglang{R} \glspl{gui} is its much broader and less technically-skilled audience.
We cater to students new to statistics and analysts and researchers in community groups and government agencies with various requirements and skill levels.
We use simple design principles to engage our audience and democratise data analysis skills by minimising the demand for up-front knowledge---the names of tests and
procedures, for example---and replace it with up-front information easily accessed through contextual dialogues.
These principles led to \pkg{iNZight} taking on a ``variable first'' approach.
Users select the variables they are interested in and let the software automatically produce outputs based on a set of defaults.
In this way, we facilitate and encourage rapid data exploration.
\Cref{sec:design-principles} includes further details on the design principles of \pkg{iNZight}.

\pkg{iNZight} has been adopted throughout New Zealand's statistical education programs, from the year~9 (age 13) school curriculum to postgraduate statistics courses in teaching institutions around the country.
In addition, the combination of \pkg{iNZight}'s simplicity and powerful toolset make it a popular choice for research organisations and national statistics offices,\footnote{ANDREW: any island nation examples?} including the Australian Bureau of Statistics\footnote{\url{https://www.abs.gov.au/}} and Statistics NZ.\footnote{\url{https://www.stats.govt.nz/}}
So the same free statistical software can be used from high school through to research environments, creating a simplified pathway for the development of future statistical analysts.
This paper provides an overview of \pkg{iNZight}'s design principles (\cref{sec:design-principles}), main features (\cref{sec:features}), technical details of its development (\cref{sec:technical}), an introduction to the \emph{add-on} system (\cref{sec:addons}), and a description of the installation process (\cref{sec:installation}).


\section[Design principles for iNZight]{Design principles for \pkg{iNZight}}\label{sec:design-principles}

Democratisation aims to improve the accessibility of data for a broader audience by removing the barriers restricting access and use, thereby unlocking the ability to discover and apply the information contained within data.
These barriers often come down to the availability of time, funding, and the required skills.
As we have noted in \cite{Wild_2021}, co-author Andrew Sporle is involved with statistical and health agencies in several small Pacific nations, who are often overwhelmed by the information needs of their own countries and the reporting demands of key international agencies such as the United Nations.
The national statistics offices in these countries face the triple burden of distance, small workforces, and insufficient funding.
They find it challenging to recruit and retain people with good data science skills, nor can they afford external expertise.


Accessibility issues reach beyond national statistics offices.
Indigenous nations and communities, such as those associated with the Global Indigenous Data Alliance, \footnote{\url{https://www.gida-global.org/}} seek to own, govern, and apply data for the self-determined well-being of Indigenous Peoples \citep{Walter_2020}.
Indigenous nations and governance groups not only face resource and skill constraints, but indigenous data sovereignty and governance require maintaining control over indigenous data resources.
Users can access \pkg{iNZight}'s data analysis and graphical functionality for free without the need to upload the data beyond their data environment---possession and control over the data are maintained.

The situation is very similar for subject-matter researchers in areas with projects with potential societal value but a lack of funds or access to technical skills.
The unmet data-science needs of those lacking in money and data education can be every bit as real and important as those who have more.
There will never be enough altruistic, skilled volunteers to meet these needs.
Therefore, it is vital to enable more people to do more for themselves in statistically robust ways.
While the \proglang{R} \glspl{gui} mentioned in \cref{sec:intro} do this at some level, some critical elements have been overlooked that \pkg{iNZight} can now address.


For groups like those described above, generalists need to be empowered to do things that currently only specialists can do.
Typically, these generalists are already busy---and thus time-poor---and have very little data-related education.
Addressing the lack-of-knowledge problem with up-front education runs straight into the lack-of-time problem.
Additionally, generalists do various tasks and work in specific processes infrequently.
Therefore, working around the rapid fading of memorie---such as how to do things and what they mean---is also a significant factor, bringing us to the ``problem of names''.
With programming and most of the existing data analysis \glspl{gui}, users cannot do anything until they know what they want to do and remember its name.
This problem is a significant barrier to getting started and results in significant time-losses getting back up to speed after a period of inactivity and a subsequent loss of familiarity.
Students taking service courses in statistics and data science, particularly those majoring in other subjects, are not immune to the problem either.
The long time delays experienced before applying almost anything they learn in class makes ease of refamiliarisation critical.


To circumvent the difficulties described above and seriously empower our users, we need tools that reduce the demands for up-front knowledge and place much less reliance on leaky memories.
The \pkg{iNZight} project is addressing these problems through some simple \glspl{dp}:
\begin{enumerate}
\item require as little user input as possible through automation and defaults;
\item use context to display relevant options based on user choices to reduce dependence on up-front knowledge;
\item guide users through complicated procedures by asking for one piece of information at a time;
\item display alternative options only when applicable to the data type or task.
\end{enumerate}


The basic mode of \pkg{iNZight} provides visualizations and analyses for rectangular data where variables are in columns and observations in rows.
The ``variable-first'' design lets users drive the software by choosing variables rather than procedures.
Users assign roles to variables with immediate responses determined by variable-type and defaults (variable-types currently recognized are: categorical, numeric, and date-time).
The underlying metaphor is, \emph{``Tell me about \ldots''}, so tell me about a variable---or a relationship between two variables---either alone or subsetted/facetted by other variables.
Here, \emph{``Tell me about \ldots''} refers to instant graphics delivery whenever users interact with the interface since we believe graphics are the most accessible, information-rich artefacts for broad audiences.
Additionally, people are less likely to do silly things after looking at their data first.


Users can obtain numeric information (the ``tell'' in ``Show and tell'') by explicitly asking for it by clicking \menu{Get Summary} or \menu{Get Inference}.
The underlying metaphor for both is, \emph{``Give me the types of information analysts generally want to see in a situation like this''}.
\menu{Get Inference} gives users an analysis of variance, chi-square test, regression panel, or other available test based on the variables selected.
Confidence intervals and \emph{P}-values accompany inferential output wherever appropriate for the tests performed.
As per \gls{dp} 2, users do not have to know or remember what to ask for or how to ask for it. \
This behaviour demonstrates one of many barriers knocked down by \pkg{iNZight}---entry for beginners and re-entry for users returning after a period of non-use.
After-the-fact information concerning \emph{``How can I read this and what does it mean?''}has compelling relevance when you have output in front of you.
When used in its basic mode, the up-front knowledge requirements of \pkg{iNZight} are minimal:
users only need a high-level familiarity with rectangular data and variables.
The ability to identify situations where a variable-type default may need overriding (for example, when numeric codes are used as group labels) may also be helpful.


In the basic mode described above, we have automated everything using defaults and delivering immediate results.
However, the use of defaults begs the question, \emph{``How else can I look at this?''}.
A plot-type selection box allows scrolling (with a mouse wheel or arrow key) through plots from all the applicable graph-types in the Financial Times Visual Vocabulary,\footnote{\url{http://www.vizwiz.com/2018/07/visual-vocabulary.html}} with some additions.
Use of defaults also begs, \emph{``How else can I do this?''}, for example, by making suitable alternatives available (through dropdowns or other controls) in place of the defaults provided.
Inferences, for example, can be based on normal theory or bootstrapping, and a switch can turn on epidemiological versions of outputs when appropriate (for example, odds and risk ratios).
Options for plot enhancements are extensive, including:
\begin{itemize}
\item information-adding mechanisms like coding of additional variables using colour, size, and symbol;
\item adding trend lines and other inferential mark-up;
\item identification and labelling of points;
\item motion (playing through a set of faceted graphs);
\item interactivity;
\item and many additional modifications users might desire for aesthetic reasons.
\end{itemize}

In the basic mode described above we have automated everything by using defaults and delivering immediate results.
This, however, begs the question, \emph{``How else can I look at this?''} A plot-type selection box allows scrolling (with a mouse wheel or arrow key) through plots from all the applicable graph-types in the Financial Times Visual Vocabulary,\footnote{\url{http://www.vizwiz.com/2018/07/visual-vocabulary.html}} with some additions.
Use of defaults also begs, \emph{``How else can I do this?''}, for example by making applicable alternatives available (through dropdowns or other controls) in place of the defaults provided.
Inferences, for example, may be based on normal theory or bootstrapping, and a switch can turn on epidemiological versions of outputs (for example odds- and risk-ratios) when appropriate.
Options for plot enhancements are extensive including:
% overriding small-data/large-data defaults for graphics;
information-adding mechanisms like coding of additional variables using colour, size, and symbol;
adding trend lines and other inferential mark-up;
identification and labelling of points; motion (playing through a set of faceted graphs);
interactivity;
and many additional modifications that might be desired for aesthetic reasons.

Another feature of \pkg{iNZight} is its code-writing functionality, which it shares with other \glspl{gui}, but in a less prominent manner.
For most users, no \proglang{R} code is ever seen;
however, each action invoked by the user runs some \proglang{R} code, which is appended to the \proglang{R} script, with some select instances of live-code display and editing available (more details on this in \cref{sec:code-writing}).
Originally the code-writing functionality was developed as a way for students to become familiar with \proglang{R} code after already developing basic data visualisation, exploration, and analysis skills:
they use the tool as normal, but can now obtain the \proglang{R} code used to perform the analysis, and begin editing and running the code themselves in \proglang{R} rather than having to start from a blank script.
Furthermore, this same feature makes \pkg{iNZight} a powerful research development tool by allowing users to quickly explore a dataset while simultaneously creating an \proglang{R} script that can form the basis of a robust, reproducible workflow in a research setting.

\pkg{iNZight}'s high-level, variable-driven requests accompanied by instant results facilitates and encourages rapid data exploration.
By significantly reducing the barriers to access, performing data-analysis tasks become accessible to a diverse range of individuals and organisations.
In doing so, \pkg{iNZight} is democratising data, a highly valuable resource in our modern digital world.
