\section{Technical details}\label{sec:technical}

\pkg{iNZight}'s interface is built with \proglang{R} using the three support packages \pkg{gWidgets2}, \pkg{gWidgets2RGtk2}, and \pkg{RGtk2}.
\pkg{gWidgets2} \citep{gWidgets2} provides a simple widget-based \gls{api} to build a cross-platform interface with \proglang{R}, with support for \pkg{Tcl/Tk} \citep{tcltk}, \pkg{Qt} \cite{qt}, and \pkg{GTK+ 2.0} \citep{gtk}.
We chose \pkg{GTK+ 2.0}, as it was the most feature-rich and---at the time---had the best cross-platform support (see \cref{sec:os-reqs}).
The \pkg{GTK+ 2.0} binaries are accessed through \proglang{R} using the \pkg{RGtk2} package \citep{RGtk2}, with commands translated from \pkg{gWidgets2} using the \pkg{gWidgest2RGtk2} package \citep{gWidgets2RGtk2}.


\subsection{Component design}\label{sec:design}

The \gls{gui} for \pkg{iNZight} uses an \gls{oop} framework in \proglang{R} called \emph{reference classes} (from the \pkg{methods} packages included with the base \proglang{R} distribution).
\pkg{gWidgets2} uses the same framework to describe individual components.
Each piece of the \gls{gui} is a \emph{class}, with individual buttons, methods (actions), and even smaller sub-components.
\Gls{oop} features \emph{inheritance}, allowing developers to create a general class shared by several related `child' components, but with different layouts or methods;
this drives \pkg{iNZight}'s add-on system (\cref{sec:addons}).
\Cref{fig:inzight_main_widgets} shows the \pkg{iNZight} \gls{gui} with several main components annotated.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/win/10_inzight_classes.png}
    \caption[The reference class components of the iNZight interface.]{\label{fig:inzight_main_widgets} The reference class components of the \pkg{iNZight} interface, some of which are themselves made from several child objects.}
\end{figure}

In addition to the ``visible'' components, others exist behind the scenes.
The main one is the \class{iNZDocument} class, which stores the application's state, including the data set, variable selection, survey design information, and plot settings.
The \class{iNZDataNameWidget} component visible in the top-left of \cref{fig:inzight_main_widgets} displays a list of documents, allowing the user to switch between them.
This is invaluable when performing data transformations such as aggregation and reshaping, as each action creates a new document.


The structure of each component is, in most cases, a set of attributes that the user can control, stored as \emph{properties}, along with \emph{methods} that the component can use to react to user input or perform actions.
Most components have a main method that performs the primary function of the component.
For example, the \class{iNZFilterData} class contains a \fct{filter\_data} method that takes the user's input and performs the desired action.
\Cref{lst:filter} provides a simplified example of the \menu{Filter Data} window class, providing the user with a drop-down \fct{gcombobox} to choose a variable to filter the data.
When they click the \menu{Filter} button, the data is filtered and passed back to the main \gls{gui}.
The method uses the \fct{switch} function to select the appropriate wrapper function within the \pkg{iNZightTools} package based on the user's chosen value of ``type''.
The actual class for the \menu{Filter Data} method is more complicated and includes reactive components, so only the relevant inputs are displayed to the user.

\begin{lstfloat}[tp]
    \caption{Reference class definition for filter window example.}
    \label{lst:filter}
    \begin{Code}
    iNZFilterData <- setRefClass(
        "iNZFilterData",
        fields = list(
            GUI = "ANY",
            data = "data.frame",
            type = "ANY",
            variable = "ANY",
            operator = "ANY",
            value = "ANY",
            ...
        ),
        methods = list(
            initialize = function(gui) {
                initFields(GUI = gui, data = gui$getActiveData())
                # ... construct GUI inputs ...
                # e.g.,
                type <<- gradio(c("Numeric value", "Factor levels", "Random"))
                variable <<- gcombobox(colnames(data))
                okbtn <- gbutton("Filter", handler = function(h, ...) filter_data())
            },
            filter_data = function() {
                filtered_data <- switch(svalue(type, index = TRUE),
                    iNZightTools::filterNumeric(
                        data,
                        var = variable,
                        op = operator,
                        num = value),
                    ...
                )
                GUI$update_data(filtered_data)
            }
        )
    )
    \end{Code}
\end{lstfloat}


Each major component's structure is similar to \cref{lst:filter}, with calls to various functions, many of which come from other \pkg{iNZight*} packages.
Plots are generated by calls to \fct{iNZightPlots::inzplot}, while data import is handled by \fct{iNZightTools::smart\_read}.
The wrappers enforce separation of the interface and data logic so that the \gls{gui} is only concerned with receiving user input and displaying the output.

<<quick_hack,echo=FALSE>>=
code <- function(x) tidy_all_code(iNZightTools::code(x))
url <- "https://www.stat.auckland.ac.nz/~wild/data/test/nls.dta"
if (!file.exists("nls.dta"))
    download.file(url, "nls.dta")
@

\subsection{Code-writing wrapper functions}\label{sec:code-writing-wrappers}

Another advantage of having components calling external functions is that the wrapper functions can attach the lower-level \proglang{R} code used to generate the result.
The \gls{gui} can fetch the code from the returned data and attach it to the script (described in \cref{sec:code-writing}) while keeping the \gls{gui} and data-oriented code separate.
Here is an example using \fct{iNZightTools::smart\_read}:
<<code_from_result>>=
library("iNZightTools")
data <- smart_read("nls.dta")
print_code(data)
@
The \fct{iNZightTools::code} function can extract the \proglang{R} code attached to the resulting object.
In the example above, \proglang{R} users can see that the \pkg{haven} package \citep{haven} was used to read this \proglang{Stata} file (\code{.dta}).
Beginner \proglang{R} users need only learn the one function---\fct{smart\_read}---but can quickly examine and modify the underlying code returned.
In this way, these users can read a wide variety of datasets and quickly adapt the provided code to fit unique situations by reading the documentation for the supplied function, rather than having to do the time-consuming job of searching for the correct package and starting from scratch.


While the \gls{gui} packages provide the structure of the visual \gls{gui}, it is the collection of \proglang{R} packages developed alongside \pkg{iNZight} that power the program.
The main reason for creating separate packages was to seprate interface and data logic.
Additionally, it allows parallel development of a separate Shiny \citep{shiny} interface (\cref{sec:online}) using the same wrapper functions.
\Cref{tab:inzight_pkgs} lists the packages associated with the \pkg{iNZight} project.
Most of these packages have simple high-level interfaces that connect to the \gls{gui} but can also be used by beginner \proglang{R} users on their own \citep[Sections~3 and 4]{Burr_2021}.


<<inzight_pkgs,echo=FALSE,results=tex>>=
library(magrittr)
library(kableExtra)

pkgs <- c(
    "\\pkg{iNZight}" = 'The main package for the \\gls{gui}',
    "\\pkg{iNZightModules}" = "An additional \\gls{gui} package providing additional modules for the main \\pkg{iNZight} program.",
    "\\pkg{iNZightPlots}" = "Provides plot function \\fct{inzplot} along with \\fct{inzsummary} for descriptive statistics and \\fct{inzinference} for inference and hypothesis testing.",
    "\\pkg{iNZightRegression}" = "Plots and summaries of regression models, including from \\fct{lm}, \\fct{glm}, and \\fct{survey::svyglm} objects.",
    "\\pkg{iNZightTS}" = "Time series visualisation, decomposition, and forecasting.",
    "\\pkg{iNZightMR}" = "Visualisation and estimation of multiple response data.",
    "\\pkg{iNZightTools}" = 'A suite of helper functions for data processing and variable manipulation.'
)
tab <- data.frame(Package = names(pkgs), Description = as.character(pkgs))
knitr::kable(tab, "latex", booktabs = TRUE,
    caption = 'iNZight R package family',
    label = 'inzight_pkgs',
    linesep = "",
    escape = FALSE) %>%
    column_spec(2, width = "10cm") %>%
    kable_styling(font_size = 8)
@




\subsection{Usage}\label{sec:usage}

At its core, \pkg{iNZight} is an \proglang{R} package that can be installed and run like any other (see \cref{sec:installation}).
Once installed, the main program is launched by a function of the same name:
<<manual_usage,eval=FALSE>>=
library("iNZight")
iNZight()
@
This function takes an optional \code{data} argument, which will launch \pkg{iNZight} with the data loaded and ready to explore.
The \code{data} argument could also be used within an \proglang{R} script used by a research group, where the data needs to be loaded in a specific way (for example, from a secure database).
Users of the \pkg{iNZight} \gls{gui} need only source a script similar to the following.
\begin{CodeInput}
library("DBI")
con <- dbConnect(...)
tbl_data <- dbGetQuery(con, "SELECT ...")
library("iNZight")
iNZight(data = tbl_data)
\end{CodeInput}

The \gls{gui} object is returned invisibly for development purposes and may be assigned to a variable:
\begin{CodeInput}
ui <- iNZight()
\end{CodeInput}
This way, developers can access the \class{iNZGUI} object and can explore states and trigger actions for easier testing.
In the following two commands, the first returns the dimensions of the current data, while the second sets the \emph{Variable 1} drop-down (\code{V1box}) value to \code{height}.
\begin{CodeChunk}
\begin{CodeInput}
R> dim(ui$getActiveData())
\end{CodeInput}
\begin{CodeOutput}
[1] 500  10
\end{CodeOutput}
\begin{CodeInput}
R> ui$ctrlWidget$V1box$set_value("height")
\end{CodeInput}
\end{CodeChunk}
The second line would trigger the plotting of `height'.
